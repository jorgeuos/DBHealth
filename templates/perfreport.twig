{% extends 'admin.twig' %}

{% block content %}

<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <style>
        h1,
        h2,
        h3,
        h4 {
            font-weight: 700;
        }

        h4 {
            margin: 5px 0 5px;
            0;
        }

        table {
            max-width: 700px;
        }

        td,
        th {
            border: 1px solid #999999;
        }

    </style>
</head>
<div class="content">
    <h1>Matomo performance analyzes</h1>
    <p>This page will run a few functions to test your environment and present some guidance regarding your SQL Database and PHP Settings<br>
        Some of the database calculations are PHP rewrites of the legendary tuning-primer.sh Writen by: Matthew Montgomery
        <a target="_blank" href="https://bugs.launchpad.net/mysql-tuning-primer">https://bugs.launchpad.net/mysql-tuning-primer</a><br>
        If you find errors or if you have other suggestions for improvements, please report them here: <br>
        <a href="https://github.com/digitalist-se/DBHealth/issues">https://github.com/digitalist-se/DBHealth/issues</a>
    </p>
    <h2>Database</h2>

    <div class="card">
        <div class="card-content">
            {% set uptime = queryCacheCheck.uptime | round(0, 'ceil') %}
            {% if uptime < 86400 %}
            <p class="alert alert-warning">Your database was restarted only {{ (uptime / 60) |round(0, 'ceil') }} minutes ago.<br>
                Our calculation depend on that database status variables are correct and depending on your system load this can take some time. Make sure you come back again and check before you do any drastic actions. <br>
                {% else %}
            <p>Your Database has been running for {{ (uptime / 60) |round(0, 'ceil') }} hours so hopefully you can rely on the database status variables that we use to calculate performance.<br>
                {% endif %}
        </div>
    </div>
    <div class="card">
        <div class="card-content">
            <h3>Memory usage</h3>
            <ul>
                <li>Max memory <b>{{ memUsage.max_memory | round(0, 'ceil')}} MB</b> - The highest usage of memory so far (based on used connections)  (Should not exceeds 90% of your servers physical memory)</li>
                <li>Total memory <b>{{ memUsage.total_memory | round(0, 'ceil')}} MB</b> - The highest possible usage of memory (based on max connections):  (Should not exceeds  95% of your servers physical memory)</li>
                <li>Per thread_buffer <b>{{ memUsage.per_thread_buffers | round(0, 'ceil')}} MB</b> - Maximum memory that can be consumed by a thread: </li>
                <li>Global buffers <b>{{ memUsage.global_buffers | round(0, 'ceil')}} MB</b> - (innodb_buffer_pool_size + innodb_additional_mem_pool_size + innodb_log_buffer_size + key_buffer_size + query_cache_size) </li>
            </ul>
        </div>
    </div>
    <div class="card">
        <div class="card-content">
            <h3>Network Connection</h3>
            <p>Database connection test took {{ db_connection }} ms<br>
                We run "SELECT 1" to only test the latency of your db connection<br>
                As a benchmark I get (0.10 - 0.30 ms) on my laptop where the network is local (very little latency)</p>
        </div>
    </div>
    <div class="card">
        <div class="card-content">
            <h3>Temporary tables and files</h3>
            {% if tmpTableCheck.tmp_disk_tables_ratio > 20 %}
            <p class="alert alert-warning">Your tmp_disk_tables_ratio is {{ tmpTableCheck.tmp_disk_tables_ratio }} %. <br>
                Many temporary tables are being written to disk instead of being kept in memory.<br>
                Created tmp disk tables: {{ tmpTableCheck.tmp_disk_tables }} <br>
                Increasing max_heap_table_size and tmp_table_size might help. <br>
                However some temporary tables are always being written to disk, independent of the value of these variables. <br>
                To eliminate these you will have to rewrite your queries to avoid those conditions (Within a temporary table: <br>
                Presence of a BLOB or TEXT column or presence of a column bigger than 512 bytes) as mentioned in the <a href="https://dev.mysql.com/doc/refman/8.0/en/internal-temporary-tables.html">MySQL Documentation</a>
            </p>
            {% else %}
            <p class="alert alert-success">Your tmp_disk_tables_ratio is {{ tmpTableCheck.tmp_disk_tables_ratio }} % seems fine.<br>
            </p>

            {% endif %}
            The calculation formula for tmp_disk_tables_ratio is: <BR>
            tmp_disk_tables_ratio = ((tmp_disk_tables * 100 / ( created_tmp_tables + tmp_disk_tables)))

            {% set dbratio = tmpTableCheck.created_tmp_tables / uptime  %}
            {% if dbratio > 20 %}
            <p class="alert alert-danger">The ratio (created_tmp_tables / uptime) is {{ dbratio | round(2, 'ceil') }} wich is alarming high. (higher than 20)<br>
                You definitley need to look into if your settings are ok
            </p>
            {% else %}
            <p class="alert alert-success">The ratio (created_tmp_tables / uptime) is {{ dbratio | round(2, 'ceil') }} wich fine (should be lower than 20).<br>
                {% endif %}


                {% set diskratio = tmpTableCheck.tmp_disk_tables / uptime   %}
                {% if diskratio  > 1 %}
            </p>
            <p class="alert alert-danger">The ratio (tmp_disk_tables / uptime) is {{ diskratio|round(2, 'ceil') }} wich is alarming high (higher than 1).<br>
                You definitley need to look into lowering the disk io.
            </p>
            {% else %}
            <p class="alert alert-success">The ratio (tmp_disk_tables / uptime) is {{ diskratio|round(2, 'ceil') }} wich fine (should be lower than 1).<br>
                {% endif %}

                {% set o_file_rate = tmpTableCheck.open_files / uptime  * 60 * 60 %}

                {% if o_file_rate > 5  %}
            </p>
            <p class="alert alert-warning">The rate of opening files (Open_files / Uptime) is high. {{o_file_rate |round(2, 'ceil')}} per hour (should be below 5)<br>
                Consider increasing open_files_limit, and check the error log when restarting after changing open_files_limit.<br>
                Note that your uptime of {{(uptime / 60) | round(0, 'ceil')}} minutes is quite low, this will affect the rate so you might want to wait some time before you make any changes.
            </p>
            {% else %}
            <p class="alert alert-success">The rate of opening files (Open_files / Uptime) seems good: {{o_file_rate |round(2, 'ceil')}} per hour (should be below 5)<br>
            </p>
            {% endif %}

            {% set o_table_rate = tmpTableCheck.opened_tables / uptime  * 60 * 60 %}
            {% if o_table_rate > 10 and uptime > 10800 %}
            <p class="alert alert-warning">The rate of opening tables (Opened_tables / Uptime) is high. {{o_table_rate |round(2, 'ceil')}} per hour (should be below 10)<br>
                Opening tables requires disk I/O which is costly. Increasing table_open_cache might avoid this.<br>
                Note that your uptime of {{(uptime / 60) | round(0, 'ceil')}} minutes is quite low, this will affect the rate so you might want to wait some time before you make any changes.
            </p>
            {% else %}
            <p class="alert alert-success">The rate of opening tables (Opened_tables / Uptime) seems good: {{o_table_rate |round(2, 'ceil')}} per hour (should be below 10)<br>
            </p>
            {% endif %}

        </div>
    </div>
    {# Error starts here #}
    <div class="card">
        <div class="card-content">
            <h3>Query Cache</h3>
            {% if queryCacheCheck.query_cache_type == 'OFF' %}
            <p class="alert alert-success">Your query cache is disabled. This is good, since the Query cache is depricated from MySQL 5.7 and will be removed in MySQL 8.0. (query_cache_type = 'OFF')<br></p>
            {% else %}
            <p class="alert alert-warning">You are using the query cache but the general recommendation is to disable Query cache since it is depricated from MySQL 5.7 and will be removed in MySQL 8.0 To disable the query cache simply set: <b>query_cache_type = OFF</b>
            </p>

            <h4>Since you are using the query cache we present some stats below</h4>

            <h4>Query Cache Fragmentation</h4>

            {% if queryCacheCheck.qcache_percent_fragmentedHR > 20 %}
            <p class="alert alert-warning">The Query Cache is {{queryCacheCheck.qcache_percent_fragmentedHR}} % fragmented<br>
                Run "FLUSH QUERY CACHE" periodically to defragment the query cache memory
                If you have a lot of small SQL queries in your application lowering query_cache_min_res_unit might reduce fragmentation."
            </p>
            {% else %}
            <p class="alert alert-success">The Query Cache fragmentation is ({{queryCacheCheck.qcache_percent_fragmentedHR}} %) which is fine<br>
                {% endif %}
            <h4>Query Cache Fill ratio</h4>
            {% if queryCacheCheck.qcache_fill_ratio < 25 %}
            <p class="alert alert-warning">
                Your query_cache_size of {{ queryCacheCheck.query_cache_size | rawSafeDecoded}} MB might be unnecessary high (resources might be used somewhere else)
                A to big query_cache_size might actually slow down a high traffic database.
                Try lowering the value untill your hitrate starts to drop
                Also try to lower the query_cache_min_res_unit to see if your database will cache more querys.
                The qcache_fill_ratio is only {{queryCacheCheck.qcache_fill_ratio}} %
            </p>
            {% else %}
            <p class="alert alert-success">Your Query Cache Fill ratio is {{queryCacheCheck.qcache_fill_ratio}} % wich us fine</p>
            {% endif %}

            {% set uptime = queryCacheCheck.uptime | round(0, 'ceil') %}

            {% if queryCacheCheck.qcache_hits != 0 %}
                {% set q_hitrate = queryCacheCheck.qcache_hits / (queryCacheCheck.qcache_hits + queryCacheCheck.    qcache_inserts ) * 100  %}
            {% else %}
                {% set q_hitrate = 0 %}
            {% endif %}
            {% if q_hitrate < 80 %}
            <p class="alert alert-warning">Your Query Cache hit ratio is {{q_hitrate |round(2, 'ceil')}} %, this is to low. (should be above 80%)<br>
                However if your uptime is low this might be the reason, so make sure to wait untill your database has got enough traffic. </p>
            {% else %}
            <p class="alert alert-success">Your Query Cache hit ratio is {{q_hitrate |round(2, 'ceil')}} % which is fine
            </p>
            <br>
            <h4>Query Cache Status variables</h4>

            {% endif %}
            <table>
                <thead>
                    <th>Name</th>
                    <th>Value</th>
                </thead>
                <tbody>
                    <tr>
                        <td>uptime</td>
                        <td>{{ (queryCacheCheck.uptime / 60)|round(0, 'ceil')}} minutes</td>
                    </tr>
                    <tr>
                        <td>uptime_since_flush_status </td>
                        <td>{{ queryCacheCheck.uptime_since_flush_status }}</td>
                    </tr>
                    <tr>
                        <td>qcache_percent_fragmented </td>
                        <td>{{ queryCacheCheck.qcache_percent_fragmentedHR |round(0, 'ceil')}} MB</td>
                    </tr>
                    <tr>
                        <td>qcache_free_memory </td>
                        <td>{{ queryCacheCheck.qcache_free_memory |round(0, 'ceil')}} MB</td>
                    </tr>
                    <tr>
                        <td>qcache_fill_ratio </td>
                        <td>{{ queryCacheCheck.qcache_fill_ratio |round(0, 'ceil')}} %</td>
                    </tr>
                    <tr>
                        <td>qcache_free_memory </td>
                        <td>{{ queryCacheCheck.qcache_free_memory |round(0, 'ceil')}} MB</td>
                    </tr>
                    <tr>
                        <td>qcache_percent_fragmented </td>
                        <td>{{queryCacheCheck.qcache_percent_fragmentedHR |round(0, 'ceil')}} MB</td>
                    </tr>
                    <tr>
                        <td>qcache_lowmem_prunes </td>
                        <td>{{ queryCacheCheck.qcache_lowmem_prunes}} (times queries have been removed from the query cache due to lack of memory)</td>
                    </tr>
                    <tr>
                        <td>qcache_hits </td>
                        <td>{{ queryCacheCheck.qcache_hits}}</td>
                    </tr>
                    <tr>
                        <td>qcache_inserts </td>
                        <td>{{ queryCacheCheck.qcache_inserts}}</td>
                    </tr>
                    <tr>
                        <td>qcache_not_cached </td>
                        <td>{{ queryCacheCheck.qcache_not_cached}}</td>
                    </tr>
            </table>
            <h4>Query Cache Settings variables</h4>
            <table>
                <thead>
                    <th>Name</th>
                    <th>Value</th>
                </thead>
                <tbody>
                    <tr>
                        <td>query_cache_size </td>
                        <td>{{ queryCacheCheck.query_cache_size}} MB</td>
                    </tr>
                    <tr>
                        <td>query_cache_min_res_unit </td>
                        <td>{{ queryCacheCheck.query_cache_min_res_unit}} bytes</td>
                    </tr>
                    <tr>
                        <td>query_cache_limit </td>
                        <td>{{ queryCacheCheck.query_cache_limit}} MB</td>
                    </tr>
            </table>
            {% endif %}
        </div>
    </div>
    {# end error #}
    <div class="card">
        <div class="card-content">
            <h3>Innodb Buffer pool</h3>
            {% if getBufferpoolTest.innodb_buffer_pool_size < 1023  %}
            <p class="alert alert-warning"> Your innodb_buffer_pool_size is alarmingly low for a production system. This indicates that you never configured your MYSQL instance and this will lead to a very slow Matomo database when your database grows.
            </p>
            {% else %}
            <p class="alert alert-success">Your innodb_buffer_pool_size is set higer than 1024 MB, which indicates you made some adjustments but make sure you adopt the bufferpool according to your  server memory</p>
            {% endif %}
            <br>
            <p>The general recommendation is to set innodb_buffer_pool_size to at least 80% of the RAM available to MySQL (and even a higher ratio if you have more than 8G of RAM on you server). </p>           <br>



            <ul>
                <li>Current InnoDB bufferpool free: {{getBufferpoolTest.percent_innodb_buffer_pool_free}} MB</li>
                <li>Current InnoDB bufferpool zize: {{getBufferpoolTest.innodb_buffer_pool_size}} MB</li>
            </ul>

            {% if getBufferpoolTest.innodb_flush_log_at_trx_commit != 2  %}
            <p class="alert alert-warning">You should change your database setting innodb_flush_log_at_trx_commit to 2 for optimal performance<br>
                Your current value is {{getBufferpoolTest.innodb_flush_log_at_trx_commit}}<br>
                <a href="https://matomo.org/docs/optimize-how-to/">Read more here.</a>
            </p>
            {% endif %}

        </div>
    </div>
    <h2>PHP Checks</h2>
    <div class="card">
        <div class="card-content">

            {% set xdebug_mode = phpInfo.xdebug_mode %}
            {% if phpInfo.xdebug_status or xdebug_mode == null or xdebug_mode == off  %}
            <p class="alert alert-success">Xdebug is not enabled, this is good in a production environment (since Xdebug will slow you application down).</p>
            {% else %}
            <p class="alert alert-warning">"Xdebug is enabled, this will slow you application down and something you should be aware of. <br>
                Only enable Xdebug when you need it to troubleshoot your code.</p>
            {% endif %}
        </div>
    </div>
    <div class="card">
        <div class="card-content">
            <h3>PHP Realpath Cache</h3>
            <p>The realpath cache can be important for your system io, since if the cache is to low files needs to be read from disk wich will affect the system IO.<br>
                PHP does not have a good way to show if this value is good or not, we can only see the current usage (without history), meaning this value will change all the time.<br>
                You can experiment with this and perhaps see if your systems disk IO is affected (in your server monitoring system).</p>
            <ul>
                <li>Realpath CacheUsage: {{ getPhpRealpathCacheUsage | rawSafeDecoded}} MB</li>
                <li>realpath_cache_size: {{ getPhpRealpathCacheSettings.realpath_cache_size | rawSafeDecoded}}</li>
                <li>realpath_cache_ttl: {{ getPhpRealpathCacheSettings.realpath_cache_ttl | rawSafeDecoded}}</li>
            </ul>
        </div>
    </div>
    <div class="card">
        <div class="card-content">
            <h3>PHP Memory settings</h3>
            <ul>
                <li>memory_limit: {{ phpInfo.memory_limit | rawSafeDecoded}}</li>
                <li>post_max_size: {{ phpInfo.post_max_size | rawSafeDecoded}}</li>
                <li>upload_max_filesize: {{ phpInfo.upload_max_filesize | rawSafeDecoded}}</li>
                <li>max_execution_time: {{ phpInfo.max_execution_time | rawSafeDecoded}}</li>
            </ul>
        </div>
        <div class="card-content">
            <h3>PHP Opcache</h3>
            {% if opCacheEnabled != false %}

            {% if queryCacheCheck.opcach_status.cache_full %}
            <p class="alert alert-warning">OpCache is full</p>
            {% else %}
            <p class="alert alert-success">OpCache is not full</p>
            {% endif %}
            <br>
            {% if queryCacheCheck.opcach_status.opcache_statistics.num_cached_keys > (queryCacheCheck.opcach_status.opcache_statistics.max_cached_keys *0.9) %}
            <p class="alert alert-warning">Your OpCache is close to not beeing able handle enough files<br>
                Solution: Increase opcache.max_accelerated_files setting.<br>
                There is {{queryCacheCheck.opcach_status.opcache_statistics.num_cached_keys}} keys in the cache.<br>
                The maximum allowed keys is {{queryCacheCheck.opcach_status.opcache_statistics.max_cached_keys}}<br>
            </p>
            {% else %}
            <p class="alert alert-success">OpCache seems to handle the cache entries in your application fine. <br>
                There is {{queryCacheCheck.opcach_status.opcache_statistics.num_cached_keys}} keys in the cache.<br>
                The maximum allowed keys is {{queryCacheCheck.opcach_status.opcache_statistics.max_cached_keys}}</p>
            {% endif %}
<br>
            <p>Memory assigned to OpCache {{opCacheStatus.directives['opcache.memory_consumption'] / 1024 / 1024}} MB
            </p>
            <p>
                 Free memory {{(queryCacheCheck.opcach_status.memory_usage.free_memory/ 1024 / 1024 )|round(1, 'ceil') }} MB
            </p>
            <p>
                Used memory {{(queryCacheCheck.opcach_status.memory_usage.used_memory/ 1024 / 1024 )|round(1, 'ceil') }} MB</p>

            <ul>
                <li>Number of opcache restarts due to low memory {{queryCacheCheck.opcach_status.opcache_statistics.oom_restarts}}</li>
                <li>Number of opcache restarts due to low max_accelerated_files {{queryCacheCheck.opcach_status.opcache_statistics.hash_restarts}}</li>
                <li>Last restart ( {{queryCacheCheck.last_restart_time}} )</li>
                <li>OpCache hit rate {{queryCacheCheck.opcach_status.opcache_statistics.opcache_hit_rate|round(0, 'ceil')}} %</li>
                <li>OpCache wasted_memory {{(queryCacheCheck.opcach_status.memory_usage.wasted_memory/ 1024 / 1024 )|round(2, 'ceil')}} MB</li>
            </ul>
            <br>

            {% else %}
            <p>PHP Opcache is not running, you should defintley look into this since it can speed up your PHP application significantly.<br>Learn more about the Opcache here:
                <a target="_blank" href="https://www.php.net/manual/en/book.opcache.php">https://www.php.net/manual/en/book.opcache.php</a>
            </p>

            {% endif %}
        </div>

    </div>
    {% endblock %}
